/*
   Copyright (c) 2018 GreenGene. (https://github.com/greengene/) All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

@delimiter ++;

SET SCHEMA greenflow;

SET INITIAL SCHEMA greenflow;

DROP TABLE IF EXISTS execution_assigned_variable;

DROP TABLE IF EXISTS execution_transaction;
DROP TABLE IF EXISTS execution_conversation;

DROP TABLE IF EXISTS configuration_returned_variable;
DROP TABLE IF EXISTS configuration_parameter;
DROP TABLE IF EXISTS configuration_declared_variable;
DROP TABLE IF EXISTS configuration_predicate;
DROP TABLE IF EXISTS configuration_treepath;
DROP TABLE IF EXISTS configuration_workunit;
DROP TABLE IF EXISTS configuration_workflow;

DROP TABLE IF EXISTS dual;

DROP PROCEDURE IF EXISTS nextvals;
DROP SEQUENCE IF EXISTS predicate_sequence;

CREATE TABLE IF NOT EXISTS Configuration_Workflow (
id BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY NOT NULL,
name VARCHAR(64) NOT NULL,
description VARCHAR(64),
creation_date DATETIME, 
creator VARCHAR(64),
UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS Configuration_WorkUnit (
id BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY NOT NULL,
workflow_id BIGINT NOT NULL,
discriminator TINYINT NOT NULL, 
type SMALLINT NOT NULL, 
"return" boolean, 
persist_after_return boolean, 
assign_to VARCHAR(64), 
FOREIGN KEY (workflow_id) REFERENCES Configuration_Workflow(id)
);

CREATE TABLE IF NOT EXISTS Configuration_TreePath (
ancestor BIGINT NOT NULL,
descendant BIGINT NOT NULL,
length BIGINT NOT NULL,
PRIMARY KEY(ancestor, descendant),
FOREIGN KEY (ancestor) REFERENCES Configuration_WorkUnit(id),
FOREIGN KEY (descendant) REFERENCES Configuration_WorkUnit(id)
);

CREATE TABLE IF NOT EXISTS Configuration_Predicate(
id BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY NOT NULL,
workunit_id BIGINT NOT NULL,
parent_predicate_id BIGINT,
type SMALLINT, 
relation_type TINYINT, 
FOREIGN KEY (workunit_id) REFERENCES Configuration_WorkUnit(id),
FOREIGN KEY (parent_predicate_id) REFERENCES Configuration_Predicate(id)
);

CREATE TABLE IF NOT EXISTS Configuration_Declared_Variable(
workunit_id BIGINT NOT NULL,
variable_ordinal TINYINT NOT NULL, 
name VARCHAR(64),
value VARCHAR(512),
PRIMARY KEY(workunit_id, variable_ordinal),
FOREIGN KEY (workunit_id) REFERENCES Configuration_WorkUnit(id)
);

CREATE TABLE IF NOT EXISTS Configuration_Parameter(
workunit_id BIGINT NULL,
predicate_id BIGINT NULL,
parameter_ordinal TINYINT NOT NULL, 
variable_name VARCHAR(64), 

FOREIGN KEY (workunit_id) REFERENCES Configuration_WorkUnit(id),
FOREIGN KEY (predicate_id) REFERENCES Configuration_Predicate(id)
);

CREATE TABLE IF NOT EXISTS Configuration_Returned_Variable(
workunit_id BIGINT NULL, 
variable_ordinal TINYINT NOT NULL, 
variable_name VARCHAR(64), 
PRIMARY KEY(workunit_id, variable_ordinal),
FOREIGN KEY (workunit_id) REFERENCES Configuration_WorkUnit(id)
);

CREATE TABLE IF NOT EXISTS Execution_Conversation(
id BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY NOT NULL,
workflow_id BIGINT NOT NULL,
locked_transaction_ordinal INT,

FOREIGN KEY (workflow_id) REFERENCES Configuration_Workflow(id)
);

CREATE TABLE IF NOT EXISTS Execution_Transaction(
conversation_id BIGINT NOT NULL,
ordinal INT,
suspension_point VARCHAR(512),
was_persisted boolean, 
start_timestamp TIMESTAMP,
end_timestamp TIMESTAMP,
PRIMARY KEY(conversation_id, ordinal),
FOREIGN KEY (conversation_id) REFERENCES Execution_Conversation(id)
);

CREATE TABLE IF NOT EXISTS Execution_Assigned_Variable(
conversation_id BIGINT NOT NULL,
workunit_id BIGINT NOT NULL,
name VARCHAR(64),
value VARCHAR(512),
PRIMARY KEY(conversation_id, workunit_id, name),
FOREIGN KEY (conversation_id) REFERENCES Execution_Conversation(id),
FOREIGN KEY (workunit_id) REFERENCES Configuration_WorkUnit(id)
);

CREATE TABLE IF NOT EXISTS dual(
dummy BIGINT NULL
);

CREATE SEQUENCE IF NOT EXISTS predicate_sequence START WITH 1 INCREMENT BY 1;

CREATE PROCEDURE nextvals (OUT current_value BIGINT, IN bump_size INTEGER)

  MODIFIES SQL DATA
  BEGIN ATOMIC

    DECLARE i INTEGER;
    IF bump_size IS NULL OR bump_size < 1 THEN SET i = 0; ELSE SET i = bump_size - 1; End IF;

    SET current_value = NEXT VALUE FOR predicate_sequence;

    loop_label: WHILE i > 0 DO

      INSERT INTO dual VALUES NEXT VALUE FOR predicate_sequence;

      SET i = i - 1;

    END WHILE loop_label;

  END;

++
@delimiter ;++